#!/usr/bin/env python3.5
# encoding: utf-8

import csv
import pandas as pd


table={
"Serial_Number"                 :[0x00,2],
"Modbus ID"                     :[0x02,1],
"Modbus Baudrate"               :[0x03,1],
"Software Ver."                 :[0x04,2],
"Hardware Version"              :[0x06,2],
"SO output rate"                :[0x09,2],
"Combined Code"                 :[0x0B,3],
"LCD Cycle Time"                :[0x0D,1],
"L1 Voltage"                    :[0x0E,1],
"L2 Voltage"                    :[0x10,2],
"L3 Voltage"                    :[0x12,2],
"Grid Freq."                    :[0x14,2],
"L1 Current"                    :[0x16,2],
"L2 Current"                    :[0x18,2],
"L3 Current"                    :[0x1A,2],
"Total Active Power"            :[0x1C,2],
"L1 Active Power"               :[0x1E,2],
"L2 Active Power"               :[0x20,2],
"L3 Active Power"               :[0x22,2],
"Total reactive p."             :[0x24,2],
"L1 reactive power"             :[0x26,2],
"L2 reactive power"             :[0x28,2],
"L3 reactive power"             :[0x2A,2],
"Total apparent p."             :[0x2C,2],
"L1 apparent power"             :[0x2E,2],
"L2 apparent power"             :[0x30,2],
"L3 apparent power"             :[0x32,2],
"Total Power Factor"            :[0x34,2],
"L1 power factor"               :[0x36,2],
"L2 power factor"               :[0x38,2],
"L3 power factor"               :[0x3A,2],
"Date Time"                     :[0x3C,5],
"CRC code"                      :[0x41,2],
"Total Active Energy"           :[0x100,2],
"L1 Active Energy"              :[0x102,2],
"L2 Active Energy"              :[0x104,2],
"L3 Active Energy"              :[0x106,2],
"Total Forward Active Energy"   :[0x108,2],
"L1 Forward Active Energy"      :[0x10A,2],
"L2 Forward Active Energy"      :[0x10C,2],
"L3 Forward Active Energy"      :[0x10E,2],
"Total Reverse Energy"          :[0x110,2],
"L1 Reverse Energy"             :[0x112,2],
"L2 Reverse Energy"             :[0x114,2],
"L3 Reverse Energy"             :[0x116,2],
"Total Reactive Energy"         :[0x118,2],
"L1 Reactive Energy"            :[0x11A,2],
"L2 Reactive Energy"            :[0x11C,2],
"L3 Reactive Energy"            :[0x11E,2],
"Total Forward Reactive Energy" :[0x120,2],
"L1 Forward Reactive Energy"    :[0x122,2],
"L2 Forward Reactive Energy"    :[0x124,2],
"L3 Forward Reactive Energy"    :[0x126,2],
"Total Reverse Reactive Energy" :[0x128,2],
"L1 Reverse Reactive Energy"    :[0x12A,2],
"L2 Reverse Reactive Energy"    :[0x12C,2],
"L3 Reverse Reactive Energy"    :[0x12E,2],
"T1 Total Active Energy"              :[0x130,2],
"T1 Total Forward Active Energy"      :[0x132,2],
"T1 Total Reverse Active Energy"      :[0x134,2],
"T1 Total Reactive Energy"            :[0x136,2],
"T1 Total Forward Reactive Energy"    :[0x138,2],
"T1 Total Reverse Reactive Energy"    :[0x13A,2],
"T2 Total Active Energy"              :[0x13C,2],
"T2 Total Forward Active Energy"      :[0x13E,2],
"T2 Total Reverse Active Energy"      :[0x140,2],
"T2 Total Reactive Energy"            :[0x142,2],
"T2 Total Forward Reactive Energy"    :[0x144,2],
"T2 Total Reverse Reactive Energy"    :[0x146,2],
"T3 Total Active Energy"              :[0x148,2],
"T3 Total Forward Active Energy"      :[0x14A,2],
"T3 Total Reverse Active Energy"      :[0x14C,2],
"T3 Total Reactive Energy"            :[0x14E,2],
"T3 Total Forward Reactive Energy"    :[0x150,2],
"T3 Total Reverse Reactive Energy"    :[0x152,2],
"T4 Total Active Energy"              :[0x154,2],
"T4 Total Forward Active Energy"      :[0x156,2],
"T4 Total Reverse Active Energy"      :[0x158,2],
"T4 Total Reactive Energy"            :[0x15A,2],
"T4 Total Forward Reactive Energy"    :[0x15C,2],
"T4 Total Reverse Reactive Energy"    :[0x15E,2],
}

t=(
0x000, 0x002, 0x003, 0x004,
0x006, 0x009, 0x00B, 0x00D,
0x00E, 0x010, 0x012, 0x014,
0x016, 0x018, 0x01A, 0x01C,
0x01E, 0x020, 0x022, 0x024,
0x026, 0x028, 0x02A, 0x02C,
0x02E, 0x030, 0x032,
0x034, 0x036, 0x038, 0x03A,
0x03C, 0x041, 0x100, 0x102,
0x104, 0x106, 0x108, 0x10A,
0x10C, 0x10E, 0x110, 0x112,
0x114, 0x116, 0x118, 0x11A,
0x11C, 0x11E, 0x120, 0x122,
0x124, 0x126, 0x128, 0x12A,
0x12C, 0x12E, 0x130, 0x132,
0x134, 0x136, 0x138, 0x13A,
0x13C, 0x13E, 0x140, 0x142,
0x144, 0x146, 0x148, 0x14A,
0x14C, 0x14E, 0x150, 0x152,
0x154, 0x156, 0x158, 0x15A,
0x15C, 0x15E, 0x160)

#
# def mem2float(reg1, reg2):
#     # found on beloved "satckoverflow"
#     raw = struct.pack('>HH', reg1, reg2)
#     return struct.unpack('>f', raw)[0]
#
# def float2mem(flo):
#     # found on beloved "satckoverflow"
#     raw = struct.pack('>f', flo)
#     regsy=struct.unpack('>HH', raw)
#     return [regsy[0], regsy[1]]
#


def import_cvs():
    reader = csv.reader(open("dict.csv"))
    dic = {}
    to_remove=str.maketrans(dict.fromkeys('[,]'))
    for row in reader:
        a = row[1].translate(to_remove).split()
        print(a)
        dic[row[0]] = [int(a[0]),int(a[1])]
        print(dic)
    return dic


def check_data_file():
    return 0

def read_channel(ch):
    print("Czytam", ch)


def read_all_channels(channels):

    for ch in channels:
        print (ch)
    return 0





# for x,y in enumerate(table):
#     table[y][0]=t[x]
#     table[y][1]=t[x+1]-t[x]
#
#
# #print table
#
#
# with open('dict.csv', 'w') as csv_file:
#     writer = csv.writer(csv_file)
#     for key, value in table.items():
#        writer.writerow([key, value])


c=import_cvs()

# #read_all_channels(c)
#
# df=pd.DataFrame.from_dict(c)
#
# print df
# df.to_csv("out.txt", sep='\t')
#
# dd=pd.read_csv("out.txt", sep='\t')
# print dd
# print c
#
# for x in  list(dd):
#     print x
# #
# print mydict
# #
# for x,y in enumerate(mydict):
#    print x,mydict[y], table[y]
#
#


#
#
# #
# with open('mycsvfile.csv', 'wb') as f:  # Just use 'w' mode in 3.x
#     w = csv.DictWriter(f, table.keys())
#     w.writeheader()
#     w.writerow(table)
#
# with open('mycsvfile.csv') as fh:
#     rd = csv.DictReader(fh, delimiter=',')
#
# print fh



# testEmeter=energymeter.testPort(DEVICE_0, ADDR)
# if testEmeter:
#    mbcli = energymeter.startClient(DEVICE_0, ADDR)
#
#    regs_t0=energymeter.readRegs(mbcli, 0x100,2)
#    regs_t1=energymeter.readRegs(mbcli, 0x130,2)
#    regs_t2=energymeter.readRegs(mbcli, 0x13C,2)
#
#
#    txt =str(datetime.datetime.now())
#    txt+=" Total: "+ str( mem2float(regs_t0[0],regs_t0[1]))
#    txt+=" T1: "+ str( mem2float(regs_t1[0],regs_t1[1]))
#    txt+=" T2: "+ str( mem2float(regs_t2[0],regs_t2[1]))+"\n"
#
#    print txt
#
#    with open('/home/pi/ORNO_3F/energy.log', 'a') as file:
#       file.write(txt)
#
#
#    xold=-2
#    for x in table:
# 	dx= x-xold
# 	xold=x
# 	regs=energymeter.readRegs(mbcli, x,dx)
# 	print x, " :: ", round(mem2float(regs[0],regs[1]),3)
#
#
# else:
#
#    print "ERROR: meter not found"
